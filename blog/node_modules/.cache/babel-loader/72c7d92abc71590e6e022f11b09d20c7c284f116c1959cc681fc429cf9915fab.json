{"ast":null,"code":"import axios from \"axios\";\nimport { API_NOTIFICATIONS_MSG, Services_url } from \"../constant/config\";\nconst API_url = \"http://localhost:8000\";\nconst instances = axios.create({\n  baseURL: API_url,\n  timeout: 10000\n});\ninstances.interceptors.request.use(function (config) {\n  if (config.data instanceof FormData) {\n    config.headers[\"Content-Type\"] = \"multipart/form-data\";\n  } else {\n    config.headers[\"Content-Type\"] = \"application/json\";\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\ninstances.interceptors.response.use(function (response) {\n  return processResponse(response);\n}, function (error) {\n  return Promise.reject(processError(error));\n});\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    var _response$data;\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.msg) || \"An error occurred during the request\",\n      code: response === null || response === void 0 ? void 0 : response.status\n    };\n  }\n};\nconst processError = error => {\n  if (error.response) {\n    console.log(\"Error in response:\", error.response); // Log detailed error response\n    return {\n      isError: true,\n      msg: error.response.data.msg || API_NOTIFICATIONS_MSG.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    console.log(\"Error in Request:\", error.request); // Log request error\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.requestFailure,\n      code: \"\"\n    };\n  } else {\n    console.log(\"Error in Network:\", error.message); // Log network error\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.networkError,\n      code: \"\"\n    };\n  }\n};\nconst API = {};\nfor (const [key, value] of Object.entries(Services_url)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => {\n    return instances({\n      url: value.url,\n      method: value.method,\n      data: body,\n      responseType: value.responseType,\n      onUploadProgress: function (progressEvent) {\n        if (showUploadProgress) {\n          const percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          showUploadProgress(percentageCompleted);\n        }\n      },\n      onDownloadProgress: function (progressEvent) {\n        if (showDownloadProgress) {\n          const percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          showDownloadProgress(percentageCompleted);\n        }\n      }\n    });\n  };\n}\nexport { API };","map":{"version":3,"names":["axios","API_NOTIFICATIONS_MSG","Services_url","API_url","instances","create","baseURL","timeout","interceptors","request","use","config","data","FormData","headers","error","Promise","reject","response","processResponse","processError","status","isSuccess","_response$data","isFailure","msg","code","console","log","isError","responseFailure","requestFailure","message","networkError","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","url","method","responseType","onUploadProgress","progressEvent","percentageCompleted","Math","round","loaded","total","onDownloadProgress"],"sources":["E:/Blog-master/blog/src/Service/Api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_NOTIFICATIONS_MSG, Services_url } from \"../constant/config\";\r\n\r\nconst API_url = \"http://localhost:8000\";\r\nconst instances = axios.create({\r\n  baseURL: API_url,\r\n  timeout: 10000,\r\n});\r\n\r\ninstances.interceptors.request.use(\r\n  function (config) {\r\n    if (config.data instanceof FormData) {\r\n      config.headers[\"Content-Type\"] = \"multipart/form-data\";\r\n    } else {\r\n      config.headers[\"Content-Type\"] = \"application/json\";\r\n    }\r\n    return config;\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\ninstances.interceptors.response.use(\r\n  function (response) {\r\n    return processResponse(response);\r\n  },\r\n  function (error) {\r\n    return Promise.reject(processError(error));\r\n  }\r\n);\r\n\r\nconst processResponse = (response) => {\r\n  if (response?.status === 200) {\r\n    return { isSuccess: true, data: response.data };\r\n  } else {\r\n    return {\r\n      isFailure: true,\r\n      status: response?.status,\r\n      msg: response?.data?.msg || \"An error occurred during the request\",\r\n      code: response?.status,\r\n    };\r\n  }\r\n};\r\n\r\nconst processError = (error) => {\r\n  if (error.response) {\r\n    console.log(\"Error in response:\", error.response); // Log detailed error response\r\n    return {\r\n      isError: true,\r\n      msg: error.response.data.msg || API_NOTIFICATIONS_MSG.responseFailure,\r\n      code: error.response.status,\r\n    };\r\n  } else if (error.request) {\r\n    console.log(\"Error in Request:\", error.request); // Log request error\r\n    return {\r\n      isError: true,\r\n      msg: API_NOTIFICATIONS_MSG.requestFailure,\r\n      code: \"\",\r\n    };\r\n  } else {\r\n    console.log(\"Error in Network:\", error.message); // Log network error\r\n    return {\r\n      isError: true,\r\n      msg: API_NOTIFICATIONS_MSG.networkError,\r\n      code: \"\",\r\n    };\r\n  }\r\n};\r\nconst API = {};\r\n\r\nfor (const [key, value] of Object.entries(Services_url)) {\r\n  API[key] = (body, showUploadProgress, showDownloadProgress) => {\r\n    return instances({\r\n      url: value.url,\r\n      method: value.method,\r\n      data: body,\r\n      responseType: value.responseType,\r\n      onUploadProgress: function (progressEvent) {\r\n        if (showUploadProgress) {\r\n          const percentageCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          showUploadProgress(percentageCompleted);\r\n        }\r\n      },\r\n      onDownloadProgress: function (progressEvent) {\r\n        if (showDownloadProgress) {\r\n          const percentageCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          showDownloadProgress(percentageCompleted);\r\n        }\r\n      },\r\n    });\r\n  };\r\n}\r\n\r\nexport { API };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,qBAAqB,EAAEC,YAAY,QAAQ,oBAAoB;AAExE,MAAMC,OAAO,GAAG,uBAAuB;AACvC,MAAMC,SAAS,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC7BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;AACX,CAAC,CAAC;AAEFH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAChC,UAAUC,MAAM,EAAE;EAChB,IAAIA,MAAM,CAACC,IAAI,YAAYC,QAAQ,EAAE;IACnCF,MAAM,CAACG,OAAO,CAAC,cAAc,CAAC,GAAG,qBAAqB;EACxD,CAAC,MAAM;IACLH,MAAM,CAACG,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;EACrD;EACA,OAAOH,MAAM;AACf,CAAC,EACD,UAAUI,KAAK,EAAE;EACf,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDX,SAAS,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CACjC,UAAUQ,QAAQ,EAAE;EAClB,OAAOC,eAAe,CAACD,QAAQ,CAAC;AAClC,CAAC,EACD,UAAUH,KAAK,EAAE;EACf,OAAOC,OAAO,CAACC,MAAM,CAACG,YAAY,CAACL,KAAK,CAAC,CAAC;AAC5C,CACF,CAAC;AAED,MAAMI,eAAe,GAAID,QAAQ,IAAK;EACpC,IAAI,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,MAAK,GAAG,EAAE;IAC5B,OAAO;MAAEC,SAAS,EAAE,IAAI;MAAEV,IAAI,EAAEM,QAAQ,CAACN;IAAK,CAAC;EACjD,CAAC,MAAM;IAAA,IAAAW,cAAA;IACL,OAAO;MACLC,SAAS,EAAE,IAAI;MACfH,MAAM,EAAEH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM;MACxBI,GAAG,EAAE,CAAAP,QAAQ,aAARA,QAAQ,wBAAAK,cAAA,GAARL,QAAQ,CAAEN,IAAI,cAAAW,cAAA,uBAAdA,cAAA,CAAgBE,GAAG,KAAI,sCAAsC;MAClEC,IAAI,EAAER,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG;IAClB,CAAC;EACH;AACF,CAAC;AAED,MAAMD,YAAY,GAAIL,KAAK,IAAK;EAC9B,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClBS,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEb,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC;IACnD,OAAO;MACLW,OAAO,EAAE,IAAI;MACbJ,GAAG,EAAEV,KAAK,CAACG,QAAQ,CAACN,IAAI,CAACa,GAAG,IAAIxB,qBAAqB,CAAC6B,eAAe;MACrEJ,IAAI,EAAEX,KAAK,CAACG,QAAQ,CAACG;IACvB,CAAC;EACH,CAAC,MAAM,IAAIN,KAAK,CAACN,OAAO,EAAE;IACxBkB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEb,KAAK,CAACN,OAAO,CAAC,CAAC,CAAC;IACjD,OAAO;MACLoB,OAAO,EAAE,IAAI;MACbJ,GAAG,EAAExB,qBAAqB,CAAC8B,cAAc;MACzCL,IAAI,EAAE;IACR,CAAC;EACH,CAAC,MAAM;IACLC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEb,KAAK,CAACiB,OAAO,CAAC,CAAC,CAAC;IACjD,OAAO;MACLH,OAAO,EAAE,IAAI;MACbJ,GAAG,EAAExB,qBAAqB,CAACgC,YAAY;MACvCP,IAAI,EAAE;IACR,CAAC;EACH;AACF,CAAC;AACD,MAAMQ,GAAG,GAAG,CAAC,CAAC;AAEd,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACpC,YAAY,CAAC,EAAE;EACvDgC,GAAG,CAACC,GAAG,CAAC,GAAG,CAACI,IAAI,EAAEC,kBAAkB,EAAEC,oBAAoB,KAAK;IAC7D,OAAOrC,SAAS,CAAC;MACfsC,GAAG,EAAEN,KAAK,CAACM,GAAG;MACdC,MAAM,EAAEP,KAAK,CAACO,MAAM;MACpB/B,IAAI,EAAE2B,IAAI;MACVK,YAAY,EAAER,KAAK,CAACQ,YAAY;MAChCC,gBAAgB,EAAE,SAAAA,CAAUC,aAAa,EAAE;QACzC,IAAIN,kBAAkB,EAAE;UACtB,MAAMO,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CACnCH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;UACDX,kBAAkB,CAACO,mBAAmB,CAAC;QACzC;MACF,CAAC;MACDK,kBAAkB,EAAE,SAAAA,CAAUN,aAAa,EAAE;QAC3C,IAAIL,oBAAoB,EAAE;UACxB,MAAMM,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CACnCH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;UACDV,oBAAoB,CAACM,mBAAmB,CAAC;QAC3C;MACF;IACF,CAAC,CAAC;EACJ,CAAC;AACH;AAEA,SAASb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}