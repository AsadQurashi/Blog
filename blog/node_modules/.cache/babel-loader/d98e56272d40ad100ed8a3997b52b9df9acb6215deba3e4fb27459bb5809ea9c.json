{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATIONS_MSG, Services_url } from '../../../constant/config';\nconst url = 'http://localhost:8000';\nconst instances = axios.create({\n  baseURL: url,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"User signup form/data\"\n  }\n});\ninstances.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\ninstances.interceptors.response.use({\n  function(response) {\n    //stop global loader\n    return processResponse(response);\n  },\n  function(error) {\n    //global loader\n    return Promise.reject(processError(error));\n  }\n});\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSucess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isfailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\nconst processError = error => {\n  if (error.response) {\n    // request made and server responed with a status other than 200 \n    console.log(\"Error in response\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // request made bur not responsed\n    console.log(\"Error in Request\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.requestFailuer,\n      code: ''\n    };\n  } else {\n    // something happend in frontend\n    console.log(\"Error in Network\", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.networkError,\n      code: ''\n    };\n  }\n  ;\n};\nexport const API = {};\nfor (const [key, value] of Object.entries(Services_url)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => {\n    instances({\n      method: value.method,\n      url: value.url,\n      data: body,\n      responseType: value.responseType,\n      onUploadProgress: function (progessEvent) {\n        if (showUploadProgress) {\n          let percentagecompleted = Math.round(progessEvent.loaded * 100 / progessEvent.total);\n          showUploadProgress(percentagecompleted);\n        }\n      },\n      onDownloadProgress: function (progessEvent) {\n        if (this.onDownloadProgress) {\n          let percentagecompleted = Math.round(progessEvent.loaded * 100 / progessEvent.total);\n          showDownloadProgress(percentagecompleted);\n        }\n      }\n    });\n  };\n}","map":{"version":3,"names":["axios","API_NOTIFICATIONS_MSG","Services_url","url","instances","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","function","processResponse","processError","status","isSucess","data","isfailure","msg","code","console","log","toJSON","isError","responseFailure","requestFailuer","networkError","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","responseType","onUploadProgress","progessEvent","percentagecompleted","Math","round","loaded","total","onDownloadProgress"],"sources":["D:/Blog-master/blog/src/component/account/Service/Api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_NOTIFICATIONS_MSG, Services_url } from '../../../constant/config';\n\n\nconst url = 'http://localhost:8000';\nconst instances = axios.create({\n  baseURL: url,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"User signup form/data\",\n  },\n});\n\ninstances.interceptors.request.use(\n  function (config) {\n    return config;\n  },\n\n  function (error) {\n    return Promise.reject(error);\n  }\n);\n\ninstances.interceptors.response.use({\n  function (response) {\n    //stop global loader\n    return processResponse(response);\n  },\n  function (error) {\n    //global loader\n    return Promise.reject(processError(error));\n  }\n});\n\nconst processResponse = (response) => {\n  if (response?.status === 200) {\n    return { isSucess: true, data: response.data };\n  } else {\n    return {\n      isfailure: true,\n      status: response?.status,\n      msg: response?.msg,\n      code: response?.code,\n    };\n  }\n};\n\nconst processError = (error) =>\n{\n    if (error.response) {\n        // request made and server responed with a status other than 200 \n        console.log(\"Error in response\", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATIONS_MSG.responseFailure,\n            code: error.response.status\n        };\n    }\n    else if (error.request) {\n        // request made bur not responsed\n        console.log(\"Error in Request\", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATIONS_MSG.requestFailuer,\n            code: ''\n        };\n    }\n    else {\n        // something happend in frontend\n        console.log(\"Error in Network\", error.toJSON());\n        return {\n            isError: true,\n            msg: API_NOTIFICATIONS_MSG.networkError,\n            code: ''\n        };\n    };\n};\n\nexport const API = {};\n\nfor (const [key, value] of Object.entries(Services_url)){\n  API[key] =(body, showUploadProgress, showDownloadProgress) =>{\n      instances({\n        method: value.method,\n        url : value.url,\n        data : body,\n        responseType : value.responseType,\n        onUploadProgress : function (progessEvent) {\n          if(showUploadProgress)\n          {\n            let percentagecompleted = Math.round((progessEvent.loaded * 100)/progessEvent.total);\n            showUploadProgress(percentagecompleted);\n          }\n        },\n        onDownloadProgress : function(progessEvent){\n          if(this.onDownloadProgress)\n          {\n            let percentagecompleted = Math.round((progessEvent.loaded * 100) / progessEvent.total);\n            showDownloadProgress(percentagecompleted);\n          }\n        }\n      })\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}