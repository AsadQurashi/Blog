{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATIONS_MSG, Services_url } from '../constant/config';\nconst API_url = 'http://localhost:8000';\nconst instances = axios.create({\n  baseURL: API_url,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\ninstances.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\ninstances.interceptors.response.use(function (response) {\n  //stop global loader\n  return processResponse(response);\n}, function (error) {\n  //global loader\n  return Promise.reject(processError(error));\n});\nconst processResponse = re => {\n  var _response;\n  if (((_response = response) === null || _response === void 0 ? void 0 : _response.status) === 200) {\n    console.log(\"response from ProcessResponse\", response);\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    var _response2, _response3, _response4;\n    return {\n      isFailure: true,\n      status: (_response2 = response) === null || _response2 === void 0 ? void 0 : _response2.status,\n      msg: ((_response3 = response) === null || _response3 === void 0 ? void 0 : _response3.msg) || \"An error occurred during the request\",\n      code: (_response4 = response) === null || _response4 === void 0 ? void 0 : _response4.code\n    };\n  }\n};\nconst processError = error => {\n  if (error.response) {\n    console.log(\"Error in response:\", error.response); // Log detailed error response\n    return {\n      isError: true,\n      msg: error.response.data.msg || API_NOTIFICATIONS_MSG.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    console.log(\"Error in Request:\", error.request); // Log request error\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.requestFailure,\n      code: ''\n    };\n  } else {\n    console.log(\"Error in Network:\", error.message); // Log network error\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.networkError,\n      code: ''\n    };\n  }\n};\nconst API = {};\nfor (const [key, value] of Object.entries(Services_url)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => {\n    instances({\n      url: value.url,\n      method: value.method,\n      data: body,\n      responseType: value.responseType,\n      onUploadProgress: function (progessEvent) {\n        if (showUploadProgress) {\n          const percentagecompleted = Math.round(progessEvent.loaded * 100 / progessEvent.total);\n          showUploadProgress(percentagecompleted);\n        }\n      },\n      onDownloadProgress: function (progessEvent) {\n        if (showDownloadProgress) {\n          const percentagecompleted = Math.round(progessEvent.loaded * 100 / progessEvent.total);\n          showDownloadProgress(percentagecompleted);\n        }\n      }\n    });\n  };\n}\nexport { API };","map":{"version":3,"names":["axios","API_NOTIFICATIONS_MSG","Services_url","API_url","instances","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","processResponse","processError","re","_response","status","console","log","isSuccess","data","_response2","_response3","_response4","isFailure","msg","code","isError","responseFailure","requestFailure","message","networkError","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","url","method","responseType","onUploadProgress","progessEvent","percentagecompleted","Math","round","loaded","total","onDownloadProgress"],"sources":["D:/Blog-master/blog/src/Service/Api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_NOTIFICATIONS_MSG, Services_url } from '../constant/config';\n\n\nconst API_url = 'http://localhost:8000';\nconst instances = axios.create({\n  baseURL: API_url,\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\ninstances.interceptors.request.use(\n  function (config) {\n    return config;\n  },\n\n  function (error){\n   return  Promise.reject(error);\n  }\n);\n\ninstances.interceptors.response.use(\n  function (response) {\n    //stop global loader\n    return processResponse(response);\n  },\n  function (error) {\n    //global loader\n    return Promise.reject(processError(error));\n  }\n);\n\nconst processResponse =(re)=> {\n  if (response?.status === 200) {\n    console.log(\"response from ProcessResponse\",response)\n    return { isSuccess: true, data: response.data };\n  } else {\n    return {\n      isFailure: true,\n      status: response?.status,\n      msg: response?.msg || \"An error occurred during the request\",\n      code: response?.code,\n    };\n  }\n};\n\nconst processError = (error) => {\n  if (error.response) {\n    console.log(\"Error in response:\", error.response); // Log detailed error response\n    return {\n      isError: true,\n      msg: error.response.data.msg || API_NOTIFICATIONS_MSG.responseFailure,\n      code: error.response.status,\n    };\n  } else if (error.request) {\n    console.log(\"Error in Request:\", error.request); // Log request error\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.requestFailure,\n      code: '',\n    };\n  } else {\n    console.log(\"Error in Network:\", error.message); // Log network error\n    return {\n      isError: true,\n      msg: API_NOTIFICATIONS_MSG.networkError,\n      code: '',\n    };\n  }\n};\n\n\nconst API = {};\n\nfor (const [key, value] of Object.entries(Services_url)){\n  API[key] =(body, showUploadProgress, showDownloadProgress) =>{\n      instances({\n        url: value.url,\n        method: value.method,\n        data : body,\n        responseType : value.responseType,\n        onUploadProgress : function (progessEvent) \n        {\n          if(showUploadProgress)\n          {\n            const percentagecompleted = Math.round((progessEvent.loaded * 100)/progessEvent.total);\n            showUploadProgress(percentagecompleted);\n          }\n        },\n        onDownloadProgress : function (progessEvent){\n          if(showDownloadProgress)\n          {\n            const percentagecompleted = Math.round((progessEvent.loaded * 100) / progessEvent.total);\n            showDownloadProgress(percentagecompleted);\n          }\n        }\n      });\n  };\n}\nexport { API };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}