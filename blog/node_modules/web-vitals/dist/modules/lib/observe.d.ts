<<<<<<< HEAD
interface PerformanceEntryMap {
    'event': PerformanceEventTiming[];
    'first-input': PerformanceEventTiming[];
    'layout-shift': LayoutShift[];
    'largest-contentful-paint': LargestContentfulPaint[];
    'long-animation-frame': PerformanceLongAnimationFrameTiming[];
    'paint': PerformancePaintTiming[];
    'navigation': PerformanceNavigationTiming[];
    'resource': PerformanceResourceTiming[];
=======
export interface PerformanceEntryHandler {
    (entry: PerformanceEntry): void;
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4
}
/**
 * Takes a performance entry type and a callback function, and creates a
 * `PerformanceObserver` instance that will observe the specified entry type
 * with buffering enabled and call the callback _for each entry_.
 *
 * This function also feature-detects entry support and wraps the logic in a
 * try/catch to avoid errors in unsupporting browsers.
 */
<<<<<<< HEAD
export declare const observe: <K extends keyof PerformanceEntryMap>(type: K, callback: (entries: PerformanceEntryMap[K]) => void, opts?: PerformanceObserverInit) => PerformanceObserver | undefined;
export {};
=======
export declare const observe: (type: string, callback: PerformanceEntryHandler) => PerformanceObserver | undefined;
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4
