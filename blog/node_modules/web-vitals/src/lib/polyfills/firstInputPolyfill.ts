/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<<<<<<< HEAD
import {
  FirstInputPolyfillEntry,
  FirstInputPolyfillCallback,
} from '../../types.js';

type addOrRemoveEventListener =
  | typeof addEventListener
  | typeof removeEventListener;

let firstInputEvent: Event | null;
let firstInputDelay: number;
let firstInputTimeStamp: Date;
let callbacks: FirstInputPolyfillCallback[];
=======
import {FirstInputPolyfillEntry, FirstInputPolyfillCallback} from '../../types.js';


type addOrRemoveEventListener =
    typeof addEventListener | typeof removeEventListener;

let firstInputEvent: Event|null;
let firstInputDelay: number;
let firstInputTimeStamp: Date;
let callbacks: FirstInputPolyfillCallback[]
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

const listenerOpts: AddEventListenerOptions = {passive: true, capture: true};
const startTimeStamp: Date = new Date();

/**
 * Accepts a callback to be invoked once the first input delay and event
 * are known.
 */
export const firstInputPolyfill = (
<<<<<<< HEAD
  onFirstInput: FirstInputPolyfillCallback,
) => {
  callbacks.push(onFirstInput);
  reportFirstInputDelayIfRecordedAndValid();
};
=======
  onFirstInput: FirstInputPolyfillCallback
) => {
  callbacks.push(onFirstInput);
  reportFirstInputDelayIfRecordedAndValid();
}
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

export const resetFirstInputPolyfill = () => {
  callbacks = [];
  firstInputDelay = -1;
  firstInputEvent = null;
  eachEventType(addEventListener);
<<<<<<< HEAD
};
=======
}
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

/**
 * Records the first input delay and event, so subsequent events can be
 * ignored. All added event listeners are then removed.
 */
const recordFirstInputDelay = (delay: number, event: Event) => {
  if (!firstInputEvent) {
    firstInputEvent = event;
    firstInputDelay = delay;
<<<<<<< HEAD
    firstInputTimeStamp = new Date();
=======
    firstInputTimeStamp = new Date;
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

    eachEventType(removeEventListener);
    reportFirstInputDelayIfRecordedAndValid();
  }
<<<<<<< HEAD
};
=======
}
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

/**
 * Reports the first input delay and event (if they're recorded and valid)
 * by running the array of callback functions.
 */
const reportFirstInputDelayIfRecordedAndValid = () => {
  // In some cases the recorded delay is clearly wrong, e.g. it's negative
  // or it's larger than the delta between now and initialization.
  // - https://github.com/GoogleChromeLabs/first-input-delay/issues/4
  // - https://github.com/GoogleChromeLabs/first-input-delay/issues/6
  // - https://github.com/GoogleChromeLabs/first-input-delay/issues/7
<<<<<<< HEAD
  if (
    firstInputDelay >= 0 &&
    // @ts-ignore (subtracting two dates always returns a number)
    firstInputDelay < firstInputTimeStamp - startTimeStamp
  ) {
=======
  if (firstInputDelay >= 0 &&
      // @ts-ignore (subtracting two dates always returns a number)
      firstInputDelay < firstInputTimeStamp - startTimeStamp) {
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4
    const entry = {
      entryType: 'first-input',
      name: firstInputEvent!.type,
      target: firstInputEvent!.target,
      cancelable: firstInputEvent!.cancelable,
      startTime: firstInputEvent!.timeStamp,
      processingStart: firstInputEvent!.timeStamp + firstInputDelay,
    } as FirstInputPolyfillEntry;
<<<<<<< HEAD
    callbacks.forEach(function (callback) {
=======
    callbacks.forEach(function(callback) {
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4
      callback(entry);
    });
    callbacks = [];
  }
<<<<<<< HEAD
};
=======
}
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

/**
 * Handles pointer down events, which are a special case.
 * Pointer events can trigger main or compositor thread behavior.
 * We differentiate these cases based on whether or not we see a
 * 'pointercancel' event, which are fired when we scroll. If we're scrolling
 * we don't need to report input delay since FID excludes scrolling and
 * pinch/zooming.
 */
const onPointerDown = (delay: number, event: Event) => {
  /**
   * Responds to 'pointerup' events and records a delay. If a pointer up event
   * is the next event after a pointerdown event, then it's not a scroll or
   * a pinch/zoom.
   */
  const onPointerUp = () => {
    recordFirstInputDelay(delay, event);
    removePointerEventListeners();
<<<<<<< HEAD
  };
=======
  }
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

  /**
   * Responds to 'pointercancel' events and removes pointer listeners.
   * If a 'pointercancel' is the next event to fire after a pointerdown event,
   * it means this is a scroll or pinch/zoom interaction.
   */
  const onPointerCancel = () => {
    removePointerEventListeners();
<<<<<<< HEAD
  };
=======
  }
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

  /**
   * Removes added pointer event listeners.
   */
  const removePointerEventListeners = () => {
    removeEventListener('pointerup', onPointerUp, listenerOpts);
    removeEventListener('pointercancel', onPointerCancel, listenerOpts);
<<<<<<< HEAD
  };

  addEventListener('pointerup', onPointerUp, listenerOpts);
  addEventListener('pointercancel', onPointerCancel, listenerOpts);
};
=======
  }

  addEventListener('pointerup', onPointerUp, listenerOpts);
  addEventListener('pointercancel', onPointerCancel, listenerOpts);
}
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

/**
 * Handles all input events and records the time between when the event
 * was received by the operating system and when it's JavaScript listeners
 * were able to run.
 */
const onInput = (event: Event) => {
  // Only count cancelable events, which should trigger behavior
  // important to the user.
  if (event.cancelable) {
    // In some browsers `event.timeStamp` returns a `DOMTimeStamp` value
    // (epoch time) instead of the newer `DOMHighResTimeStamp`
    // (document-origin time). To check for that we assume any timestamp
    // greater than 1 trillion is a `DOMTimeStamp`, and compare it using
    // the `Date` object rather than `performance.now()`.
    // - https://github.com/GoogleChromeLabs/first-input-delay/issues/4
    const isEpochTime = event.timeStamp > 1e12;
<<<<<<< HEAD
    const now = isEpochTime ? new Date() : performance.now();

    // Input delay is the delta between when the system received the event
    // (e.g. event.timeStamp) and when it could run the callback (e.g. `now`).
    const delay = (now as number) - event.timeStamp;
=======
    const now = isEpochTime ? new Date : performance.now();

    // Input delay is the delta between when the system received the event
    // (e.g. event.timeStamp) and when it could run the callback (e.g. `now`).
    const delay = now as number - event.timeStamp;
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

    if (event.type == 'pointerdown') {
      onPointerDown(delay, event);
    } else {
      recordFirstInputDelay(delay, event);
    }
  }
<<<<<<< HEAD
};
=======
}
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4

/**
 * Invokes the passed callback const for =  each event type with t =>he
 * `onInput` const and =  `listenerOpts =>`.
 */
const eachEventType = (callback: addOrRemoveEventListener) => {
<<<<<<< HEAD
  const eventTypes = ['mousedown', 'keydown', 'touchstart', 'pointerdown'];
  eventTypes.forEach((type) => callback(type, onInput, listenerOpts));
};
=======
  const eventTypes = [
    'mousedown',
    'keydown',
    'touchstart',
    'pointerdown',
  ];
  eventTypes.forEach((type) => callback(type, onInput, listenerOpts));
}
>>>>>>> b047c7af968c2defde288ca932b322a98c4a7fc4
